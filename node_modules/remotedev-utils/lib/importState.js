'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = importState;

var _mapValues = require('lodash/mapValues');

var _mapValues2 = _interopRequireDefault(_mapValues);

var _jsan = require('jsan');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function importState(state, _ref) {
  var deserializeState = _ref.deserializeState;
  var deserializeAction = _ref.deserializeAction;

  if (!state) return undefined;
  var preloadedState = void 0;
  var nextLiftedState = (0, _jsan.parse)(state);
  if (nextLiftedState.payload) {
    if (nextLiftedState.preloadedState) preloadedState = (0, _jsan.parse)(nextLiftedState.preloadedState);
    nextLiftedState = (0, _jsan.parse)(nextLiftedState.payload);
  }
  if (deserializeState) {
    if (typeof nextLiftedState.computedStates !== 'undefined') {
      nextLiftedState.computedStates = nextLiftedState.computedStates.map(function (computedState) {
        return _extends({}, computedState, {
          state: deserializeState(computedState.state)
        });
      });
    }
    if (typeof nextLiftedState.committedState !== 'undefined') {
      nextLiftedState.committedState = deserializeState(nextLiftedState.committedState);
    }
  }
  if (deserializeAction) {
    nextLiftedState.actionsById = (0, _mapValues2.default)(nextLiftedState.actionsById, function (liftedAction) {
      return _extends({}, liftedAction, {
        action: deserializeAction(liftedAction.action)
      });
    });
  }

  return { nextLiftedState: nextLiftedState, preloadedState: preloadedState };
}